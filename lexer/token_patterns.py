from core.classes.token import TokenType


TOKEN_PATTERNS: dict[str:TokenType] = {
    "&": TokenType.AND,
    "|": TokenType.OR,
    "!": TokenType.NOT,
    "if": TokenType.IF,
    "else": TokenType.ELSE,
    "elif": TokenType.ELIF,
    "while": TokenType.WHILE,
    "for": TokenType.FOR,
    "let": TokenType.LET,
    "in": TokenType.IN,
    "=": TokenType.ASSIGNMENT,
    ":=": TokenType.DESTRUCTIVE_ASSIGNMENT,
    "new": TokenType.NEW,
    "as": TokenType.AS,
    "String": TokenType.STRING,
    "Number": TokenType.NUMBER,
    "Bool": TokenType.BOOL,
    "function": TokenType.FUNCTION,
    "type": TokenType.TYPE,
    "inherits": TokenType.INHERITS,
    "protocol": TokenType.PROTOCOL,
    "extends": TokenType.EXTENDS,
    "+": TokenType.PLUS,
    "-": TokenType.MINUS,
    "*": TokenType.TIMES,
    "/": TokenType.DIVIDE,
    "%": TokenType.MOD,
    "^": TokenType.POWER,
    "==": TokenType.EQUAL,
    "!=": TokenType.NOT_EQUAL,
    "<": TokenType.LESS_THAN,
    ">": TokenType.GREATER_THAN,
    "<=": TokenType.LESS_THAN_EQUAL,
    ">=": TokenType.GREATER_THAN_EQUAL,
    "is": TokenType.IS,
    ".": TokenType.DOT,
    ":": TokenType.COLON,
    ",": TokenType.COMMA,
    ";": TokenType.SEMI_COLON,
    "(": TokenType.LEFT_PARENTHESIS,
    ")": TokenType.RIGHT_PARENTHESIS,
    "[": TokenType.LEFT_BRACKET,
    "]": TokenType.RIGHT_BRACKET,
    "{": TokenType.LEFT_BRACE,
    "}": TokenType.RIGHT_BRACE,
    "PI": TokenType.PI,
    "E": TokenType.E,
    "true": TokenType.TRUE_LITERAL,
    "false": TokenType.FALSE_LITERAL,
    '"': TokenType.STRING_LITERAL,
    "[1-9]": TokenType.NUMBER_LITERAL,
    "//": TokenType.LINE_COMMENT,
    "/*": TokenType.MULTI_LINE_COMMENT_START,
    "*/": TokenType.MULTI_LINE_COMMENT_END,
    "@": TokenType.CONCAT_OPERATOR,
    "@@": TokenType.DOUBLE_CONCAT_OPERATOR,
    "=>": TokenType.ARROW_OPERATOR,
}
