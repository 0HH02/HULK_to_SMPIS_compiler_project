class Node:
    pass


class Operation(Node):
    def __init__(self, destini, op1, op2, op) -> None:
        self.destini = destini
        self.op1 = op1
        self.op2 = op2
        self.op: str = op

        if not self.op in [
            "add",
            "sub",
            "mul",
            "div",
            "rem",
            "and",
            "or",
            "slt",
            "sle",
            "sgt",
            "sge",
            "seq",
            "sne",
        ]:
            raise ValueError("Invalid operation")

    def __str__(self) -> str:
        return f"{self.op} {self.destini}, {self.op1}, {self.op2}"

    def __repr__(self) -> str:
        return str(self)


class GotoIF(Node):
    def __init__(self, reg, label) -> None:
        self.reg = reg
        self.label = label

    def __str__(self) -> str:
        return f"bnez {self.reg}, {self.label}"

    def __repr__(self) -> str:
        return str(self)


class Move(Node):
    def __init__(self, destini, source) -> None:
        self.destini = destini
        self.source = source

    def __str__(self) -> str:
        return f"move {self.destini}, {self.source}"

    def __repr__(self) -> str:
        return str(self)


class StoreWord(Node):
    def __init__(self, source, address) -> None:
        self.source = source
        self.address = address

    def __str__(self) -> str:
        return f"sw {self.source}, {self.address}"

    def __repr__(self) -> str:
        return str(self)


class LoadWord(Node):
    def __init__(self, destiny, address) -> None:
        self.destiny = destiny
        self.address = address

    def __str__(self) -> str:
        return f"lw {self.destiny}, {self.address}"

    def __repr__(self) -> str:
        return str(self)


class LoadConstant(Node):
    def __init__(self, destiny, constant) -> None:
        self.destiny = destiny
        self.constant = constant

    def __str__(self) -> str:
        return f"li {self.destiny}, {self.constant}"

    def __repr__(self) -> str:
        return str(self)
